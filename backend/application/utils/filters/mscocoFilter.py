#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import datetime
import json
import shutil
from pycocotools.coco import COCO
from application.constants import DATASET_STORAGE_PATH, DATASET_OUTPUT_PATH

class MSCocoFilter():
    ALLOWED_EXTENSIONS = set(['png','jpeg','jpg','JPG'])    

    def __init__(self, dataDir, dataType, catStart, catRange):
        self.annFile = os.path.join(DATASET_STORAGE_PATH, dataDir,"annotations/instances_%s.json" % (dataType))
        self.imgFile = os.path.join(dataDir, dataType)
        self.output_folder = os.path.join(DATASET_OUTPUT_PATH, dataDir)
        self.coco = None
        self.cats = None
        self.images = None
        self.annotations = None
        self.start = catStart
        if self.start < 0:
            self.start = 0
        self.range_ = catRange
        if self.range_ < 0:
            self.range_ = sys.maxint

    def init_read(self):
        self.coco = COCO(self.annFile)
        self.cats = self.coco.loadCats(self.coco.getCatIds())
        if self.start >= len(self.cats):
            self.cats = []
        elif (self.start + self.range_) >= len(self.cats):
            self.cats = self.cats[self.start:len(self.cats)]
        else:
            self.cats = self.cats[self.start:(self.start+self.range_)]
    
    def getAllCat(self):
        if not self.cats:
            self.init_read()
        ret = []
        for cat in self.cats:
            s = {}
            s['category'] = cat['name']
            s['supercategory'] = cat['supercategory']
            ret.append(s)
        return ret 

    def getAllSubCat(self):
        if not self.cats:
            self.init_read()
        return set([cat['name'] for cat in self.cats])

    def getAllSuperCat(self):
        if not self.cats:
            self.init_read()
        return set([cat['supercategory'] for cat in self.cats])

    def getAllSample(self):
        ret = []
        if not self.cats:
            self.init_read()
        for cat in self.cats:
            ret.extend(self.getOneSample(cat))
        return ret

    def getOneSample(self, cat):
        catIds = self.coco.getCatIds(catNms=[cat['name']])
        imgIds = self.coco.getImgIds(catIds=catIds)
        ret = []
        for i in range(len(imgIds)):
            img = self.coco.loadImgs(imgIds[i])[0]
            f = img['file_name']
            path = os.path.join(self.imgFile, f)
            format_ = f.split(".")[-1]
            if not format_ in self.ALLOWED_EXTENSIONS:
                continue
            size = os.path.getsize(os.path.join(DATASET_STORAGE_PATH, path))
            comment = ""
            width = img["width"]
            height = img["height"]
            annIds = self.coco.getAnnIds(imgIds=img['id'], catIds=catIds, iscrowd=None)
            anns = self.coco.loadAnns(annIds)
            boundingbox = []
            for ann in anns:
                boundingbox.append(ann['bbox'])
            s = {}
            s["path"] = path
            s["width"] = width
            s["height"] = height
            s["format"] = format_
            s["size"] = size
            s["comment"] = comment
            s["category"] = cat['name']
            s["boundingbox"] = boundingbox
            ret.append(s)
        return ret

    def outputSamples(self, samples):
        if not os.path.exists(self.output_folder):
            os.makedirs(self.output_folder)
        sampleout_direct = os.path.join(self.output_folder, 'pics/')
        if not os.path.exists(sampleout_direct):
            os.makedirs(sampleout_direct)
        annout_direct = os.path.join(self.output_folder, 'annotation/')
        if not os.path.exists(annout_direct):
            os.makedirs(annout_direct)
        today = datetime.date.today()
        info = {"year": today.year,
                "version": "1",
                "description": "This dataset is autogenerated by CRI Cove",
                "contributor": "",
                "url": "cove.cvf.com",
                "date_created": str(today)}
        self.images = []
        self.annotations = []
        for s in samples:
            self.outputOneSample(s)
        with open(os.path.join(annout_direct, "pics.json"), "w") as outfile:
            json.dump({"info": info, "images": self.images, "annotations": self.annotations}, outfile, indent=4)

    def outputOneSample(self, sample):
        sampleout_direct = os.path.join(self.output_folder, 'pics/')
        shutil.copy2(os.path.join(DATASET_STORAGE_PATH, sample.path), sampleout_direct)  
        to_insert = {"id": sample.id_,
                     "width": sample.width,
                     "height": sample.height,
                     "file_name": sample.path.split('/')[-1],
                     "license": 1,
                     "flickr_url": "",
                     "coco_url": "",
                     "date_captured": str(datetime.date.today())}
        self.images.append(to_insert)
        for a in sample.annotations:
            ann = {"id": a.id_,
                    "image_id": a.sample_id,
                    "category_id": a.category_id}
            self.annotations.append(ann)


